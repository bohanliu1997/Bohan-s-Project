source("DataAnalyticsFunctions.R")
library(ggplot2)
library(dplyr)

train<-read.csv("train.csv",stringsAsFactors=F)
atlanta<-train[train$City=="Atlanta",]
test<-read.csv("test.csv",stringsAsFactors=F)

####Exploratory Analysis
ggplot(atlanta, aes(x=TotalTimeStopped_p50)) + geom_histogram(bins=60) +xlim(-10,100) + ylab("Count") + xlab("Total Time Stopped - 50th Percentile")
ggplot(atlanta, aes(x=TotalTimeStopped_p80)) + geom_histogram(bins=60) +xlim(-10,200) + ylab("Count") + xlab("Total Time Stopped - 80th Percentile")

plot(TotalTimeStopped_p80~Hour, data=atlanta, main="Time-80th percentile",xlab='Hour', ylab='Time')
plot(TotalTimeStopped_p50~Hour, data=atlanta, main="Time-50th percentile",xlab='Hour', ylab='Time', col=ifelse(TotalTimeStopped_p80>0,'red','red'))

####Check direction combinations
check<-atlanta%>%group_by(EntryHeading,ExitHeading)%>%summarise(count=n())%>%arrange(desc(count))
check2<-atlanta%>%group_by(EntryHeading,ExitHeading)%>%summarise(count=n())


####Create direction dummy 
Directions<-rep(NA,nrow(atlanta))

##Entry heading N,E,W,S
for(i in 1:length(Directions))
{
  if(atlanta$EntryHeading[i]=="E"){
    if(atlanta$ExitHeading[i]%in%c("NW","N","NE")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("SW","S","SE")){
      Directions[i]<-"Right"
    }else if(atlanta$ExitHeading[i]=="E"){
      Directions[i]<-"Straight"
    }else{
      Directions[i]<-"Uturn"
    }
  }else if(atlanta$EntryHeading[i]=="W"){
    if(atlanta$ExitHeading[i]%in%c("NW","N","NE")){
      Directions[i]<-"Right"
    }else if(atlanta$ExitHeading[i]%in%c("SW","S","SE")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]=="E"){
      Directions[i]<-"Uturn"
    }else{
      Directions[i]<-"Straight"
    }
  }else if(atlanta$EntryHeading[i]=="S"){
    if(atlanta$ExitHeading[i]%in%c("NW","W","SW")){
      Directions[i]<-"Right"
    }else if(atlanta$ExitHeading[i]%in%c("NE","E","SE")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]=="N"){
      Directions[i]<-"Uturn"
    }else{
      Directions[i]<-"Straight"
    }
  }else if(atlanta$EntryHeading[i]=="N"){
    if(atlanta$ExitHeading[i]%in%c("NW","W","SW")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("NE","E","SE")){
      Directions[i]<-"Right"
    }else if(atlanta$ExitHeading[i]=="N"){
      Directions[i]<-"Straight"
    }else{
      Directions[i]<-"Uturn"
    }
  }
}

##Entry from NE
for(i in 1:length(Directions))
{
  if(atlanta$EntryHeading[i]=="NE"){
    if(atlanta$ExitHeading[i]%in%c("NW", "N", "W")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("E", "S", "SE")){
      Directions[i]<-"Right"
    } else if(atlanta$ExitHeading[i]%in%c("NE")){
      Directions[i]<-"Straight"
    }else {
      Directions[i]<-"Uturn"
    }
  }
}

##Entry from SW
for(i in 1:length(Directions))
{
  if(atlanta$EntryHeading[i]=="SW"){
    if(atlanta$ExitHeading[i]%in%c("E", "S", "SE")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("NW", "N", "W")){
      Directions[i]<-"Right"
    } else if(atlanta$ExitHeading[i]%in%c("SW")){
      Directions[i]<-"Straight"
    }else {
      Directions[i]<-"Uturn"
    }
  }
}

##Entry from SE
for(i in 1:length(Directions))
{
  if(atlanta$EntryHeading[i]=="SE"){
    if(atlanta$ExitHeading[i]%in%c("E", "N", "NE")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("W", "S", "SW")){
      Directions[i]<-"Right"
    } else if(atlanta$ExitHeading[i]%in%c("SE")){
      Directions[i]<-"Straight"
    }else {
      Directions[i]<-"Uturn"
    }
  }
}

##Entry from NW
for(i in 1:length(Directions))
{
  if(atlanta$EntryHeading[i]=="NW"){
    if(atlanta$ExitHeading[i]%in%c("W", "S", "SW")){
      Directions[i]<-"Left"
    }else if(atlanta$ExitHeading[i]%in%c("E", "N", "NE")){
      Directions[i]<-"Right"
    } else if(atlanta$ExitHeading[i]%in%c("NW")){
      Directions[i]<-"Straight"
    }else {
      Directions[i]<-"Uturn"
    }
  }
}

atlanta2<-cbind(atlanta,Directions)

##Compare stopped time for directions
ggplot(atlanta2,aes(x=Directions,y=TotalTimeStopped_p80,fill=Directions))+
  geom_boxplot()+
  scale_y_continuous(limits=c(0,200))+
  ggtitle("80 Percentile Stopped Time Across Different Directions")

ggplot(atlanta2,aes(x=Directions,y=TotalTimeStopped_p50,fill=Directions))+
  geom_boxplot()+
  scale_y_continuous(limits=c(0,200))+
  ggtitle("50 Percentile Stopped Time Across Different Directions")

ggplot(atlanta2,aes(x=Directions,y=TotalTimeStopped_p20,fill=Directions))+
  geom_boxplot()+
  scale_y_continuous(limits=c(0,200))+
  ggtitle("20 Percentile Stopped Time Across Different Directions")


####Cluster neighborhoods
library(ggmap)
register_google(key="YOUR OWN GOOGLE API KEY")
coordinates<-atlanta[,c(3,4)]%>%unique()%>%as.matrix()


####Find the best number of clusters for coordinates.
s<-scale(coordinates)
kfit <- lapply(1:20, function(k) kmeans(s,k))
kaicc <- sapply(kfit,kIC)
kbic  <- sapply(kfit,kIC,"B")
## Plotting AIC and BIC
par(mar=c(1,1,1,1))
par(mai=c(1,1,1,1))
plot(kaicc, xlab="K", ylab="IC", 
     ylim=range(c(kaicc,kbic)), # get them on same page
     type="l", lwd=2)
abline(v=which.min(kaicc))
# Next we plot BIC
lines(kbic, col=4, lwd=2)
# Vertical line where BIC is minimized
abline(v=which.min(kbic),col=4)


####Plot clustering
coordinates<-atlanta[,c(3,4)]%>%unique()%>%as.matrix()
cluster<-kmeans(coordinates,10)
coordinates<-cbind(coordinates,cluster$cluster)%>%as.data.frame()
colnames(coordinates)[3]<-"Clusters"
coordinates$Clusters<-as.factor(coordinates$Clusters)
register_google(key="AIzaSyA4iIorGu8AEWwQLXdslT0UxYF9dSoF5oI")
Atlanta<-ggmap(get_map(location = "atlanta",zoom=12,source='google',maptype="roadmap",color="bw"))
Atlanta+
  geom_point(aes(x=Longitude,y=Latitude,col=Clusters),size=2,coordinates)+
  ggtitle("Geographical Clusters Distribution")

atlanta3<-merge(atlanta2,coordinates,by=c("Latitude","Longitude"))
atlanta3$Directions<-factor(atlanta3$Directions)
atlanta3$Directions<-factor(atlanta3$Directions,levels(atlanta3$Directions)[c(4,2,3,1)])

ggplot(atlanta3,aes(x=Clusters,y=TotalTimeStopped_p80))+geom_boxplot()+scale_y_continuous(limits=c(0,200))

####Initial linear model
lm1 <- lm(TotalTimeStopped_p80~Clusters+Clusters*ExitHeading+Directions+ExitHeading*as.factor(Hour)+as.factor(Hour)+as.factor(Weekend)+as.factor(Hour)*as.factor(Weekend)+as.factor(Month),atlanta3)
summary(lm1)

####K-fold cross validation
set.seed(123)
n <- nrow(atlanta3)
nfold <- 10
foldid <- rep(1:nfold,each=ceiling(n/nfold))[sample(1:n)]
OOS_Rsquared<-rep(NA,10)
### K-fold 
for(k in 1:nfold){ 
  train<-atlanta3[which(foldid!=k),] 
  test<-atlanta3[which(foldid==k),]
  reg<-lm(TotalTimeStopped_p80~Clusters+Clusters*ExitHeading+Directions+ExitHeading*as.factor(Hour)+as.factor(Hour)+as.factor(Weekend)+as.factor(Hour)*as.factor(Weekend)+as.factor(Month),atlanta3) 
  pred.reg<-predict(reg,test,type="response")
  OOS_Rsquared[k]<-R2(y=test$TotalTimeStopped_p80, pred=pred.reg)
}
OOS_Rsquared

